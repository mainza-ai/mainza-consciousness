# Mainza Frontend Dockerfile
# Multi-stage build for optimized production image

# =============================================================================
# BUILD STAGE
# =============================================================================
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Clean install with proper architecture handling
RUN rm -rf node_modules package-lock.json && \
    npm install && \
    npm cache clean --force

# Copy source code (using frontend-specific dockerignore)
COPY . .

# Set build-time environment variables
ENV VITE_API_URL=http://mainza-backend:8000
ENV VITE_LIVEKIT_URL=ws://mainza-livekit:7880

# Build the application with error handling
RUN echo "Building Mainza Frontend..." && \
    npm run build && \
    echo "Build completed successfully" && \
    ls -la dist/ && \
    echo "Build contents:" && \
    find dist/ -type f -name "*.js" -o -name "*.css" -o -name "*.html" | head -10

# =============================================================================
# PRODUCTION STAGE
# =============================================================================
FROM nginx:alpine AS production

# Install curl for health checks
RUN apk add --no-cache curl

# Copy custom nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Copy built application from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy environment configuration script
COPY docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# Create necessary directories and set permissions
RUN mkdir -p /var/cache/nginx /var/log/nginx /var/run/nginx && \
    chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /var/run/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d

# Switch to non-root user
USER nginx

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:80/ || exit 1

# Start nginx
ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["nginx", "-g", "daemon off;"]